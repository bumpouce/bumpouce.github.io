I"‡
<p>
Recursion in programming means a function calls itself.  This is helpful to do when a big problem is made up of similar smaller problems. Adding all the numbers 1 through 4 is the same as adding 4 to all the numbers 1 through 3, for example.  That's easy enough to do on paper, but what if you wanted to add all the numbers 1 through 1000? That starts to get bulky!
</p>
<p>
The first step in creating a recursive solution to a problem is findings its base case or cases. This is a problem you can solve without needing to break down further.  For example, with the adding problem above, the base case can be 1.  We can then think of the sum of numbers 1 through 2 (sum(2)) as 2 + sum(1) and sum(1) is our base case, so it's just 1!  <p>sum(2) = 2 + sum(1) = 2 + 1 = 3</p>  Likewise, if we want to find sum(3), we know that it is 3 + sum(2), which we break down into the previous steps and know is equal to 3!  We break our problem down into its smallest part, then hand the intermediary answer back toward the big problem until we have a complete solution.
</p>
<p>Here's that same problem, written out in JavaScript:</p>
<p><code>
function sumRange(n){ <br />
  if (n == 1) {return 1}<br />
  return (n + sumRange(n - 1))<br />
}
</code><br /></p>

<p>
Base cases are critical to define, because if you try to run a recursive function without one, your function will never stop!  That's called an infinite loop, it will just keep running until you kill the process.  
</p>

<p>
Examples of recursive functions include factorials, greatest common divisors, the Towers of Hanoi problem, and binary searches.
</p>

<h4>Advantages:</h4>
<ul>
<ol>Define infinite problems with finite parts</ol>
<ol>Performance can be improved with memoization (storing+retrieving previously found results rather than recalculating them)</ol>
<ol>With functional programming languages, tail recursion optimization means little extra overhead, and may need less code complexity than iteration</ol>
</ul>
<h4>Disadvantages:</h4>
<ul>
<ol>Generally less efficient than iteration</ol>
<ol>Vulnerable to stack overflow</ol>
</ul>

<!-- <iframe height="600px" width="100%" src="http://towersofhanoi.info/Animate.aspx" scrolling="yes" frameborder="no" allowtransparency="true" allowfullscreen="true"></iframe> -->

<!-- old woman who swallowed a fly? the house that jack built?  nursery rhymes via recursion? -->

<h3>Sources</h3>
<ul>
<ol><a href="https://www.geeksforgeeks.org/recursion/">Geeks for Geeks</a></ol>
<ol><a href="https://www.codingame.com/playgrounds/5422/js-interview-prep-recursion">CodinGame</a></ol>
<ol><a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">Wikipedia</a></ol>
</ul>
:ET